//回溯法，效率比较低
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> lists = new ArrayList<>();
        Arrays.sort(candidates);
        backtrack(lists, new ArrayList<Integer>(), candidates, target, 0);
        return lists;
    }
    
    public void backtrack(List<List<Integer>> lists, List<Integer> list, int[] candidates, int remain, int start){
        if (remain < 0){
            return;
        }
        if (remain == 0){
            lists.add(new ArrayList<>(list));
        } else {
            for (int i = start; i < candidates.length; i++){
                list.add(candidates[i]);
                backtrack(lists, list, candidates, remain - candidates[i], i);
                list.remove(list.size() - 1);
            }
        }
    }
}