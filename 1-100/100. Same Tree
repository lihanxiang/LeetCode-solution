//深搜，先判断根节点，然后判断左右孩子
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        boolean result = false;
        if (p == null && q == null){
            return true;
        }
        //经过上面的 if 筛选之后，接下来就判断两个孩子是否有空的
        if (p == null || q == null){
            return false;
        }
        if (p.val == q.val){
            result = isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
        }
        return result;
    }
}

class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if (p == null && q == null){
            return true;
        }
        if (p == null || q == null){
            return false;
        }
        Stack<TreeNode> s1 = new Stack<>();
        Stack<TreeNode> s2 = new Stack<>();
        s1.push(p);
        s2.push(q);
        while (!s1.isEmpty() && !s2.isEmpty()){
            TreeNode n1 = s1.pop();
            TreeNode n2 = s2.pop();
            if (n1.val != n2.val){
                return false;
            }
            if (n1.left != null && n2.left != null){
                s1.push(n1.left);
                s2.push(n2.left);
            } else if (n1.left == null && n2.left == null){
                // do nothing
            } else {
                return false;
            }
            if (n1.right != null && n2.right != null){
                s1.push(n1.right);
                s2.push(n2.right);
            } else if (n1.right == null && n2.right == null){
                // do nothing
            } else {
                return false;
            }
        }
        if (!s1.isEmpty() || !s2.isEmpty()){
            return false;
        }
        return true;
    }
}