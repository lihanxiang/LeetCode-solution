// 动态规划
class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();
        String result = "";
		
		//dp[i][j] == true 就表示从 i 到 j 位置能构成回文子串，所以从 i + 1 到 j - 1 也要是回文子串
        boolean[][] dp = new boolean[n][n];
        for (int i = n - 1; i >= 0; i--){
            for (int j = i; j < n; j++){
				// 如果 i 和 j 的距离小于 3， 就使用短路，减少判断次数
                dp[i][j] = (s.charAt(i) == s.charAt(j)) && (j - i < 3 || dp[i + 1][j - 1]);
				// result.equals("") 表示第一次找到回文子串，后面的就是多次比较取最长
                if (dp[i][j] && (result.equals("") || j - i + 1 > result.length())){
                    result = s.substring(i, j + 1);
                }
            }
        }
        return result;
    }
}

//中心检测法，遍历字符串，对每个字符做双向延伸检测是否为回文子串，并记录最长子串长度
class Solution {
    private int begin = 0, max = 0;
    public String longestPalindrome(String s) {
        int n = s.length();
        if (n < 2){
            return s;
        }
        for (int i = 0; i < n - 1; i++){
            longestPalindrome(s, i, i);
            longestPalindrome(s, i, i + 1);
        }
        return s.substring(begin, begin + max);
    }
    
    public void longestPalindrome(String s, int i, int j){
		//向两边延伸
        while (i >= 0 && j < s.length() && s.charAt(i) == s.charAt(j)){
            i--;
            j++;
        }
		//比较长度，并记录起点
        if (j - i - 1 > max){
            max = j - i - 1;
            begin = i + 1;
        }
    }
}