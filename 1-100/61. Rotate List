//最慢的做法，一次转移一个节点
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null){
            return null;
        }
        int len = 0;
        ListNode temp = head;
        while (temp != null){
            len++;
            temp = temp.next;
        }
        int trueK = k % len;
        for (int i = 0; i < trueK; i++){
            head = rotate(head);
        }
        return head;
    }
    
    public ListNode rotate(ListNode head){
        ListNode temp = head;
        while (temp.next != null && temp.next.next != null){
            temp = temp.next;
        }
        ListNode tail = temp.next;
        temp.next = null;
        tail.next = head;
        return tail;
    }
}

//得到要转移的区间，修改头尾节点，效率较高
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null){
            return null;
        }
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode slow = dummy, fast = dummy;
        int len = 0;
        while (fast.next != null){
            len++;
            fast = fast.next;
        }
        
        for (int i = 0; i < len - (k % len); i++){
            slow = slow.next;
        }
        fast.next = dummy.next;
        dummy.next = slow.next;
        slow.next = null;
        return dummy.next;
    }
}

//单独用一个指针，将链表首尾相连，然后切断
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null){
            return null;
        }
        ListNode temp = head;
        int len = 1;
        while (temp.next != null){
            len++;
            temp = temp.next;
        }
        temp.next = head;
        for (int i = 0; i < len - (k % len); i++){
            head = head.next;
            temp = temp.next;
        }
        temp.next = null;
        return head;
    }
}