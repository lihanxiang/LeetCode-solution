class Solution {
    public int totalNQueens(int n) {
        List<List<String>> list = new ArrayList<>();
        if (n == 0){
            return 0;
        }
        char[][] board = new char[n][n];
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                board[i][j] = '.';
            }
        }
        dfs(board, 0, list);
        return list.size();
    }
    
    public void dfs(char[][] board, int col, List<List<String>> res){
        if (col == board[0].length){
            res.add(construct(board));
        }
        for (int i = 0; i < board.length; i++){
            if (isValid(board, i, col)){
                board[i][col] = 'Q';
                dfs(board, col + 1, res);
                board[i][col] = '.';
            }
        }
    }
    
    public boolean isValid(char[][] board, int x, int y){
        for (int i = 0; i < board.length; i++){
            for (int j = 0; j < y; j++){
                if (board[i][j] == 'Q' && (x == i || x + y == i + j || x - y == i - j)){
                    return false;
                }
            }
        }
        return true;
    }
    
    public List<String> construct(char[][] board){
        List<String> res = new ArrayList<>();
        for (int i = 0; i < board.length; i++){
            res.add(new String(board[i]));
        }
        return res;
    }
}