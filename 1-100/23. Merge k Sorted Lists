class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists.length == 0){
            return null;
        }
        return mergeKLists(lists, 0, lists.length - 1);
    }
    
    public ListNode mergeKLists(ListNode[] lists, int left, int right){
        if (left < right){
            int mid = left + (right - left) / 2;
            return merge(mergeKLists(lists, left, mid), mergeKLists(lists, mid + 1, right));
        }
        return lists[left];
    }
    
    public ListNode merge(ListNode l1, ListNode l2){
        if (l1 == null){
            return l2;
        }
        if (l2 == null){
            return l1;
        }
        ListNode dummy = new ListNode(0);
        ListNode l = dummy;
        while (l1 != null && l2 != null){
            if (l1.val < l2.val){
                l.next = l1;
                l = l.next;
                l1 = l1.next;
            } else {
                l.next = l2;
                l = l.next;
                l2 = l2.next;
            }
        }
        if (l1 != null){
            l.next = l1;
        }
        if (l2 != null){
            l.next = l2;
        }
        return dummy.next;
    }
}