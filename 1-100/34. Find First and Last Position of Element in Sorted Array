//two points from start and end
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] result = new int[]{-1, -1};
        if (nums.length == 0){
            return result;
        }
        int left = 0, right = nums.length - 1;
        while (left <= right){
            if (nums[left] == target){
                result[0] = left;
                break;
            }
            left++;
        }
        while (right >= left){
            if (nums[right] == target){
                result[1] = right;
                break;
            }
            right--;
        }
        return result;
    }
}


//binary search
class Solution {
    public int[] searchRange(int[] nums, int target) {
        return new int[]{findFirst(nums, target), findLast(nums, target)};
    }
    
    public int findFirst(int[] nums, int target){
        int index = -1;
        int lo = 0, hi = nums.length - 1;
        while (lo <= hi){
            int mid = lo + (hi - lo) / 2;
            if (nums[mid] >= target){
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
            if (nums[mid] == target){
                index = mid;
            }
        }
        return index;
    }
    
    public int findLast(int[] nums, int target){
        int index = -1;
        int lo = 0, hi = nums.length - 1;
        while (lo <= hi){
            int mid = lo + (hi - lo) / 2;
            if (nums[mid] <= target){
                lo = mid + 1;
            } else {
                hi = mid - 1;
            }
            if (nums[mid] == target){
                index = mid;
            }
        }
        return index;
    }
}
