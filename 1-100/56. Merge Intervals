class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> list = new ArrayList<>();
        if (intervals.size() == 0){
            return list;
        }
        intervals.sort((i1, i2) -> Integer.compare(i1.start, i2.start));
        int start = intervals.get(0).start;
        int end = intervals.get(0).end;
        for (Interval interval : intervals){
            if (interval.start <= end){
                end = Math.max(end, interval.end);
            } else {
                list.add(new Interval(start, end));
                start = interval.start;
                end = interval.end;
            }
        }
        list.add(new Interval(start, end));
        return list;
    }
}

//第二种更好
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> list = new ArrayList<>();
        if (intervals.size() == 0){
            return list;
        }
        int len = intervals.size();
        int[] start = new int[len];
        int[] end = new int[len];
        for (int i = 0; i < len; i++){
            start[i] = intervals.get(i).start;
            end[i] = intervals.get(i).end;
        }
        Arrays.sort(start);
        Arrays.sort(end);
        
        int cur = 0;
        for (int i = 0; i < len; i++){
            if (i == len - 1 || start[i + 1] > end[i]){
                list.add(new Interval(start[cur], end[i]));
                cur = i + 1;
            }
        }
        return list;
    }
}