//与最长路径相似，只是多了几个条件判断
class Solution {
    public int minDepth(TreeNode root) {
        if (root == null){
            return 0;
        }
        if (root.left == null && root.right == null){
            return 1;
        }
        // + 1 是为了因为有上一个节点
        if (root.left == null){
            return minDepth(root.right) + 1;
        }
        if (root.right == null){
            return minDepth(root.left) + 1;
        }

        // + 1 是为了因为有上一个节点
        int left = minDepth(root.left) + 1;
        int right = minDepth(root.right) + 1;

        return left < right ? left : right;
    }
}