//在每一层用一个 for 循环来遍历
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> lists = new ArrayList<>();
        if (root == null){
            return lists;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> list = new ArrayList<>();
            for (int i = 0; i < size; i++){
                TreeNode node = queue.poll();
                list.add(node.val);
                if (node.left != null){
                    queue.offer(node.left);
                }
                if (node.right != null){
                    queue.offer(node.right);
                }
            }
            lists.add(list);
        }
        return lists;
    }
}

// DFS，先每层建立一个 list，再加入数值，效率更高
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> lists = new ArrayList<>();
        helper(lists, root, 0);
        return lists;
    }
    public void helper(List<List<Integer>> lists, TreeNode node, int height){
        if (node == null){
            return;
        }
        if (height >= lists.size()){
            lists.add(new ArrayList<>());
        }
        lists.get(height).add(node.val);
        helper(lists, node.left, height + 1);
        helper(lists, node.right, height + 1);
    }
}