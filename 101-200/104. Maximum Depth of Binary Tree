//直接深搜
class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null){
            return 0;
        }
		// + 1 是为了因为有上一个节点
        int left = maxDepth(root.left) + 1;
        int right = maxDepth(root.right) + 1;

        return left > right ? left : right;
    }
}

//用栈也行，就是太慢了
class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null){
            return 0;
        }
        Stack<TreeNode> s = new Stack<>();
        Stack<Integer> depth = new Stack<>();
        s.push(root);
        depth.push(1);
        int max = 0;
        while (!s.isEmpty()){
            TreeNode node = s.pop();
            int temp = depth.pop();
            max = Math.max(max, temp);
            if (node.left != null){
                s.push(node.left);
                depth.push(temp + 1);
            }
            if (node.right != null){
                s.push(node.right);
                depth.push(temp + 1);
            }
        }
        return max;
    }
}