class Solution {
    HashMap<TreeNode, Integer> map = new HashMap<>();
    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        List<Integer> list = new ArrayList<>();
        find(root, target);
        DFS(root, target, map.get(root), K, list);
        return list;
    }
    
    public int find(TreeNode node, TreeNode target){
        if (node == null){
            return -1;
        }
        if (node == target){
            map.put(node, 0);
            return 0;
        }
        int left = find(node.left, target);
        if (left >= 0){
            map.put(node, left + 1);
            return left + 1;
        }
        int right = find(node.right, target);
        if (right >= 0){
            map.put(node, right + 1);
            return right + 1;
        }
        return -1;
    }
    
    public void DFS(TreeNode node, TreeNode target, int dis, int K, List<Integer> list){
        if (node == null){
            return;
        }
        if (map.containsKey(node)){
            dis = map.get(node);
        }
        if (dis == K){
            list.add(node.val);
        }
        DFS(node.left, target, dis + 1, K, list);
        DFS(node.right, target, dis + 1, K, list);
    }
}