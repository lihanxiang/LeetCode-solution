//用深搜，将得到的结果和当前结果对比，挑选最大的
class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int size = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] == 1){
                    size = Math.max(size, DFS(grid, i, j));
                }
            }
        }
        return size;
    }

    public int DFS(int[][] grid, int i, int j){
        int size = 0;
        if (i >= 0 && j >= 0 && i < grid.length && j < grid[i].length && grid[i][j] == 1){
            //设为 0 表示已搜索过
            grid[i][j] = 0;
            return DFS(grid, i, j - 1) + DFS(grid, i, j + 1) +
                    DFS(grid, i - 1, j) + DFS(grid, i + 1, j) + 1;
        }
        return 0;
    }
}

//直接搜索
class Solution {
    private int max = 0, count = 0;
    public int maxAreaOfIsland(int[][] grid) {
        int m = grid.length;
        if (m == 0 || grid[0].length == 0){
            return 0;
        }
        int n = grid[0].length;
        for (int i = 0; i < m; i++){
            for (int j = 0; j < n; j++){
                if (grid[i][j] == 1){
                    find(grid, i, j);
                    max = Math.max(max, count);
                    count = 0;
                }
            }
        }
        return max;
    }
    
    public void find(int[][] grid, int i, int j){
        if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == 0){
            return;          
        }
        count++;
        grid[i][j] = 0;
        find(grid, i - 1, j);
        find(grid, i + 1, j);
        find(grid, i, j - 1);
        find(grid, i, j + 1);
    }
}