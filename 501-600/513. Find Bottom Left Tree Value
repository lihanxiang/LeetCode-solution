// 在同一层从右到左遍历，因为 最左边的要放在队列末尾，所以从左到右
class Solution {
    public int findBottomLeftValue(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while (!queue.isEmpty()){
            root = queue.poll();
            if (root.right != null){
                queue.add(root.right);
            }if (root.left != null){
                queue.add(root.left);
            }
        }
        return root.val;
    }
}

class Solution {
    private int maxDepth = -1, value = 0;
    public int findBottomLeftValue(TreeNode root) {
        DFS(root, 0);
        return value;
    }
    
    public void DFS(TreeNode node, int depth){
        if (node == null){
            return;
        }
        if (node.left == null && depth > maxDepth){
            maxDepth = depth;
            value = node.val;
        }
        DFS(node.left, depth + 1);
        DFS(node.right, depth + 1);
    }
}